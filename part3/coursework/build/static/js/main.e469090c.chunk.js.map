{"version":3,"sources":["components/Note.js","services/notes.js","Notification.js","App.js","index.js"],"names":["Note","note","toggleImportance","lable","important","className","content","onClick","baseUrl","nonExisting","id","date","axios","get","then","response","data","concat","newObject","post","put","Notification","message","Footer","style","color","fontSyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","notesToShow","filter","useEffect","noteService","intialNotes","map","find","n","changedNote","returnedNote","catch","error","setTimeout","onSubmit","event","preventDefault","noteObject","Date","toISOString","import","Math","random","text","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"8LAaeA,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACf,qBAAuB,iBAC3B,OACE,qBAAIC,UAAU,OAAd,UACGJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,Q,gBCPpCK,EAAU,aAsBD,EApBA,WACX,IAAMC,EAAc,CAChBC,GAAI,IACJJ,QAAS,mCACTK,KAAM,2BACNP,WAAW,GAEf,OAAOQ,IAAMC,IAAIL,GAASM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAOR,OAarD,EAVA,SAAAS,GACX,OAAON,IAAMO,KAAKX,EAASU,GAAWJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SASrD,EANA,SAACN,EAAIQ,GAChB,OAAON,IACFQ,IADE,UACKZ,EADL,YACgBE,GAAMQ,GACxBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCVpBK,EAVM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EACO,KAGP,qBAAKjB,UAAU,QAAf,SACKiB,KCDPC,EAAS,WAMb,OACE,sBAAKC,MANa,CAClBC,MAAO,QACPC,SAAU,SACVC,SAAU,IAGV,UACE,uBACA,4GAkFSC,EA7EH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,MAJjC,mBAITO,EAJS,KAIKC,EAJL,KAgCVC,EAAcJ,EAChBJ,EACAA,EAAMS,QAAO,SAAAtC,GAAI,OAAIA,EAAKG,aAE9BoC,qBA9Ba,WACXC,IAEG3B,MAAK,SAAA4B,GACJX,EAASW,QA0BC,IAkBhB,OACE,gCACE,uCACA,cAAC,EAAD,CAAcpB,QAASc,IACvB,8BACE,yBAAQ7B,QAAS,kBAAM4B,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGI,EAAYK,KAAI,SAAA1C,GAAI,OACnB,cAAC,EAAD,CAAoBA,KAAMA,EAAMC,iBAAkB,kBA3BjC,SAACQ,GACxB,IAAMT,EAAO6B,EAAMc,MAAK,SAAAC,GAAC,OAAIA,EAAEnC,KAAOA,KAChCoC,EAAW,2BAAQ7C,GAAR,IAAcG,WAAYH,EAAKG,YAChDqC,EAAmB/B,EAAIoC,GACpBhC,MAAK,SAAAiC,GACJhB,EAASD,EAAMa,KAAI,SAAA1C,GAAI,OAAIA,EAAKS,KAAOA,EAAKqC,EAAe9C,SAC1D+C,OAAM,SAAAC,GACPZ,EAAgB,SAAD,OACJpC,EAAKK,QADD,uCAGf4C,YAAW,WACTb,EAAgB,QACf,KACHN,EAASD,EAAMS,QAAO,SAAAM,GAAC,OAAIA,EAAEnC,KAAOA,SAcsBR,CAAiBD,EAAKS,MAAnET,EAAKS,SAGpB,uBAAMyC,SAlDM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBhD,QAAS0B,EACTrB,MAAM,IAAI4C,MAAOC,cACjBC,OAAQC,KAAKC,SAAW,IAE1BlB,EAAmBa,GAChBxC,MAAK,SAAAiC,GACJhB,EAASD,EAAMb,OAAO8B,IACtBd,EAAW,QAwCb,UACE,uBAAO2B,KAAK,iBAAiBC,MAAO7B,EAAS8B,SAvD1B,SAACV,GACxBnB,EAAWmB,EAAMW,OAAOF,UAuDpB,wBAAQG,KAAK,SAAb,qBAEF,cAAC,EAAD,Q,MCxFNC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.e469090c.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const lable = note.important\n    ? 'make not important' : 'make important'\n  return (\n    <li className='note'>\n      {note.content}\n      <button onClick={toggleImportance}>{lable}</button>\n    </li>\n  )\n}\n\nexport default Note","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n    const nonExisting = {\n        id: 1000,\n        content: 'This note is not saved to server',\n        date: '2019-05-30T17:30:31.098Z',\n        important: true\n    }\n    return axios.get(baseUrl).then(response => response.data.concat(nonExisting))\n}\n\nconst create = newObject => {\n    return axios.post(baseUrl, newObject).then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    return axios\n        .put(`${baseUrl}/${id}`, newObject)\n        .then(response => response.data)\n}\n//eslint-disable-next-line \nexport default {\n    getAll,\n    create,\n    update\n}","const Notification = ({ message }) => {\n    if (message === null) {\n        return null;\n    }\n    return (\n        <div className=\"error\">\n            {message}\n        </div>\n    )\n}\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\nimport Notification from './Notification'\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontSyle: 'italic',\n    fontSize: 16\n  }\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em> Note app, Department of Computer Science, University of Helsinki 2022</em>\n    </div>\n  )\n}\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  const hook = () => {\n    noteService\n      .getAll()\n      .then(intialNotes => {\n        setNotes(intialNotes)\n      })\n  }\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      import: Math.random() < 0.5,\n    }\n    noteService.create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important)\n\n  useEffect(hook, [])\n\n  const toggleImportance = (id) => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n    noteService.update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id === id ? returnedNote : note))\n      }).catch(error => {\n        setErrorMessage(\n          `Note '${note.content}' was already deleted from server.`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map(note =>\n          <Note key={note.id} note={note} toggleImportance={() => toggleImportance(note.id)} />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input text=\"Add a new note\" value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer/>\n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App.js'\nimport './index.css'\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n)"],"sourceRoot":""}